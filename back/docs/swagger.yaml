openapi: 3.0.3
info:
  title: InterBooks
  version: 1.0.0
  description: |-
    InterBooks es una plataforma para el intercambio de libros, venta o regalos. Donde vas a poder conseguir renovar toda tu bibloteca dando aquellos libros viejos una segunda vida

servers:
  - url: http://localhost:3001
    description: Servidor Local
  - url: https://s15-02-m-node-react-interbooks.onrender.com/
    description: Deploy en Render

tags:
  - name: Books
    description: Books
  - name: Users
    description: Users
  - name: Exchanges
    description: Manage book exchanges, for all routes you must log in
paths:
  /api/auth/login:
    post:
      summary: Logs in a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: The user was successfully logged in
          content:
            application/json:
              schema:
                type: json
                example:
                  {
                    "userId": "644e5sda4a9b74c54243",
                    "jwt": "eyJhaadsciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ24544NTA0MDRlOWQ4YTRhOqwedASD3NDMiLCJpYXQiOjE3MTY0MTczNTAsImV4cCI6MTcxNjUwMzc1MH0.-M3TadDuFEEDZQMtsad56ad5321E4i3FN1mWhfS1QQdsTw",
                  }
        "404":
          description: The user was not found
        "500":
          description: Internal server error
  
  /api/user/register:
    post:
      summary: Registers a user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        "201":
          description: The user was successfully register
          content:
            application/json:
              schema:
                type: json
                example:
                  {
                    "user":
                      {
                        "username": "Naiki",
                        "password": "$2b$10$TxF5Q4jvB2VVmJW/yooaKupiZaCxh85On6hJGp2TTp9EnIEOlCbLS",
                        "email": "nicolas@gmail.com",
                        "favoriteGenres": ["fiction", "mystery"],
                        "books": [],
                        "pais": "Argentina",
                        "codigoPostal": "1870",
                        "_id": "664f54bf77e8c53de89dd719",
                        "__v": 0,
                      },
                  }
        "404":
          description: The user was not register
        "500":
          description: Internal server error
  /api/user/edit/{userId}:
    put:
      summary: Edits a user
      tags: [Users]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        "201":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: json
                example:
                  {
                    "user":
                      {
                        "username": "Naiki",
                        "password": "$2b$10$TxF5Q4jvB2VVmJW/yooaKupiZaCxh85On6hJGp2TTp9EnIEOlCbLS",
                        "email": "nicolas@gmail.com",
                        "favoriteGenres": ["fiction", "mystery"],
                        "books": [],
                        "pais": "Argentina",
                        "codigoPostal": "1870",
                        "_id": "664f54bf77e8c53de89dd719",
                        "__v": 0,
                      },
                  }
        "404":
          description: User not found
        "500":
          description: Internal server error
  /api/user/delete/{userId}:
    delete:
      summary: Deletes a user
      tags: [Users]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "201":
          description: User deleted successfully
        "404":
          description: User not found
        "500":
          description: Error when deleting user
  /api/user/add-to-wishlist:
    post:
      summary: Add to wishlist a user
      tags: [Users]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Wishlist"
      responses:
        "201":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: json
                example:
                        {
                          "wishList": [
                                    "665861da889b4ca664d545b4"
                                      ]
                        }
        "404":
          description: User not found
        "500":
          description: Internal server error
  /api/user/remove-from-wishlist:
    post:
      summary: Remove from wishlist a user
      tags: [Users]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Wishlist"
      responses:
        "201":
          description: Delete book from user wishlist
          content:
            application/json:
              schema:
                type: json
                example:
                        {
                          "wishList": [
                                    "665861da889b4ca664d545b4"
                                      ]
                        }
        "404":
          description: User not found
        "500":
          description: Internal server error
  /api/user/get-wishlist:
    post:
      summary: Get wishlist a user
      tags: [Users]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Wishlist"
      responses:
        "201":
          description: Get wishlist 
          content:
            application/json:
              schema:
                type: json
                example:
                        {
                          "wishList": [
                                    "665861da889b4ca664d545b4"
                                      ]
                        }
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/books/get:
    get:
      summary: Get books
      tags: [Books]
      description: Get books
      responses:
        "200":
          description: Get books successfully
          content:
            application/json:
              schema:
                $ref:
                  "#/components/schemas/Book"
        "404":
          description: Books not found
        "500":
          description: Internal server error   
  /api/books/post:
    post:
      security:
        - bearerAuth: []
      summary: Post books
      tags: [Books]
      description: Post books
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                year:
                  type: string
                isbn:
                  type: string
                author:
                  type: string
                genre:
                  type: string
                  enum: ['Fantasía', 'Ciencia Ficción', 'Novela', 'Romance', 'Terror', 'Suspenso', 'Biografía']
                image:
                  type: string
                  format: binary
                actions:
                  type: string
                  enum: ["Venta", "Intercambio", "Regalo"]
      responses:
        "201":
          description: The book was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: Image is required
        "500":
          description: Error uploading image
  /api/books/delete/{id}:
    delete:
      security:
        - bearerAuth: []
      summary: Delete books
      tags: [Books]
      description: Delete books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book deleted
        "400":
          description: Book not found
        "500":
          description: Error deleting book
  /api/books/edit/{id}:
    put:
      security:
        - bearerAuth: []
      summary: Edit books
      tags: [Books]
      description: Edit books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
  /api/books/genres-actions:
    get:
      summary: Get genres and actions
      tags: [Books]
      description: Get genres and actions
      responses:
        "200":
          description: The user was successfully logged in
          content:
            application/json:
              schema:
                type: json
                example:
                  {
                    "genres": ['Fantasía', 'Ciencia Ficción', 'Novela', 'Romance', 'Terror', 'Suspenso', 'Biografía'],
                    "actions": ["Venta", "Intercambio", "Regalo"]
                  }

  /api/exchange/{bookId}:
    post:
      security:
        - bearerAuth: []
      summary: Create exchange books
      tags: [Exchanges]
      description: Create exchange books
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            example:
              {"actions": "Intercambio"}
      responses:
        "201":
          description: The exchange request was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeRequest"
        "404":
          description: Book not found or User Not Found
        "400":
          description: The user cannot exchange, give or sell their book to themselves
        "500":
          description: Error exchanging book
  /api/exchange/{exchangeId}/accept:
      patch:
        security:
          - bearerAuth: []
        summary: Accept exchange
        tags: [Exchanges]
        description: Accept exchange
        parameters:
          - in: path
            name: exchangeId
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              example:
                {"bookUserFrom": "664f54bf77e8c53de89dd719"}
        responses:
          "200":
            description: The book was successfully exchanged
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ExchangeRequest"
                  example: {"status": "aceptada"}
          "400":
            description: Only pending requests can be modified or Required book to exchange
          "404":
            description: Exchange request not found or Book to exchange not found
          "403":
            description: User cannot modify this request
          "500":
            description: Error exchanging book
  /api/exchange/{exchangeId}/reject:
      patch:
        security:
          - bearerAuth: []
        summary: Reject exchange
        tags: [Exchanges]
        description: Reject exchange
        parameters:
          - in: path
            name: exchangeId
            required: true
            schema:
              type: string
        responses:
          "200":
            description: The exchange request was rejected successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ExchangeRequest"
          "400":
            description: Only pending requests can be modified
          "403":
            description: User cannot modify this request
          "404":
            description: Exchange request not found
          "500":
            description: Error exchanging book
  /api/exchanges/sent:
    get:
      security:
        - bearerAuth: []
      summary: Get all sent exchanges
      tags: [Exchanges]
      description: Get all sent exchanges
      responses:
        "200":
          description: The user was successfully get all exchanges request sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeRequestUserFrom"
        "403":
          description: The user is not the owner of the request
        "500":
          description: Error getting received exchanges
  /api/exchanges/received:
    get:
      security:
        - bearerAuth: []
      summary: Get all exchanges received
      tags: [Exchanges]
      description: Get all exchanges request received
      responses:
        "200":
          description: The user was successfully get all exchanges request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeRequestUserTo"
        "403":
          description: The user is not the owner of the request
        "500":
          description: Error getting my exchanges
  /api/exchanges/delete/sent:
    delete:
      security:
        - bearerAuth: []
      summary: Delete all exchange request sent
      tags: [Exchanges]
      description: Delete all submitted exchange requests that are not pending
      responses:
        "200":
          description: All exchanges requests submitted have been deleted
          content:
            application/json:
              example: {
                          "message": "All exchange requests submitted have been deleted",
                          "exchangeRequest": {
                            "acknowledged": true,
                            "deletedCount": 1
                          }
                        }
        "400":
          description: The user has no exchange requests
        "403":
          description: The user is not the owner of the request
        "500":
          description: Error exchanging book
  /api/exchanges/delete/received:
    delete:
      security:
        - bearerAuth: []
      summary: Delete exchange
      tags: [Exchanges]
      description: Delete all received exchange requests that are not pending
      responses:
        "200":
          description: All exchanges requests received have been deleted
          content:
            application/json:
              example: {
                          "message": "All exchange requests received have been deleted",
                          "exchangeRequest": {
                            "acknowledged": true,
                            "deletedCount": 1
                          }
                        }
        "400":
          description: The user has no exchange requests
        "403":
          description: The user is not the owner of the request
        "500":
          description: Error exchanging book

components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: usuarioprueba@example.com
        password: Usuarioprueba1!
    
    Register:
      type: object
      properties:
        email: 
          type: string
        password: 
          type: string
        username: 
          type: string
        favoriteGenres:
          type: array 
        country:
          type: string
        postalCode: 
          type: string
        phoneNumber:
          type: string
      example:
        email: usuarioprueba@example.com
        password: Usuarioprueba1!
        username: Usuarioprueba
        favoriteGenres: ["fiction", "mystery"]
        country: Argentina
        postalCode: 1870
        phoneNumber: 123456789
    
    Book:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        author:
          type: string
        genre:
          type: string
        image:
          type: string
        language:
          type: string
        action:
          type: string
        ISBN:
          type: string
        synopsis:
          type: string
        userid:
          type: string
      example:
        _id: 644e5sda4a9b74c54243
        title: The Lord of the Rings
        author: J. R. R. Tolkien
        genre: fantasy
        image: https://via.placeholder.com/150
        language: Español
        actions: Venta
        ISBN: 123456789
        synopsis: El senñor de los anillos
        userid: 664f54bf77e8c53de89dd719
  
    ExchangeRequest:
      type: object
      properties:
        __id:
          type: string
        bookId:
          type: string
        userIdFrom:
          type: string
        usernameFrom:
          type: string
        userIdTo:
          type: string
        usernameTo:
          type: string
        libraryUserFrom:
          type: array string
        phoneNumberUserFrom:
          type: string
        bookOfferedId:
          type: string
          default: null
        status:
          type: string
          default: pendiente
        actions:
          type: array string
        createdAt:
          type: string
      example: 
            {
            "bookId": "66586337889b4ca664d545bd",
            "userIdFrom": "66585c44fb1c4bb8322adb3b",
            "usernameUserFrom": "JoseHernandez",
            "userIdTo": "66586293889b4ca664d545b9",
            "usernameUserTo": "Agathachristie",
            "libraryUserFrom": [
              "665861da889b4ca664d545b4"
            ],
            "phoneNumberUserFrom": "3512714562",
            "bookOfferedId": null,
            "status": "pendiente",
            "actions": [],
            "_id": "665a03bc14ac4afd60eb13a9",
            "createdAt": "2024-05-31T17:07:08.678Z",
            "__v": 0
           }

    ExchangeObjectUserFrom:
      type: object
      properties:
        _id:
          type: string
        userIdTo:
          type: string
        usernameUserTo:
          type: string
        status:
          type: string
        actions:
          type: array string
        createdAt:
          type: string
      example: {
                  "_id": "665a060576de73cedbde7695",
                  "userIdTo": "66586293889b4ca664d545b9",
                  "usernameUserTo": "Agathachristie",
                  "status": "pendiente",
                  "actions": [],
                  "createdAt": "2024-05-31T17:16:53.508Z"
               }

    ExchangeRequestUserFrom:
      type: array
      items:
        $ref: "#/components/schemas/ExchangeObjectUserFrom"

    ExchangeObjectUserTo:
      type: object
      properties:
        _id:
          type: string
        userIdFrom:
          type: string
        usernameUserFrom:
          type: string
        libraryUserFrom:
          type: array string
        phoneNumberUserFrom:
          type: string
        status:
          type: string
        actions:
          type: array string
        createdAt:
          type: string
      example: 
        {
          "_id": "665a060576de73cedbde7695",
          "userIdFrom": "66585c44fb1c4bb8322adb3b",
          "usernameUserFrom": "JoseHernandez",
          "libraryUserFrom": [
            "665861da889b4ca664d545b4"
          ],
          "phoneNumberUserFrom": "3512714562",
          "status": "pendiente",
          "actions": [],
          "createdAt": "2024-05-31T17:16:53.508Z"
        }

    ExchangeRequestUserTo:
      type: array
      items:
        $ref: "#/components/schemas/ExchangeObjectUserTo"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
